class Composition:
    def __init__(self, name, quantity, price):
        self.list = []
        self.index = 0
        self.name = name
        self.quantity = quantity
        self.price = price

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, name):
        if not isinstance(name, str):
            raise TypeError
        self.__name = name

    @property
    def quantity(self):
        return self.__quantity

    @quantity.setter
    def quantity(self, quantity):
        if not isinstance(quantity, int):
            raise TypeError
        if quantity < 0:
            raise ValueError
        self.__quantity = quantity

    @property
    def price(self):
        return self.__price

    @price.setter
    def price(self, price):
        if not isinstance(price, int):
            raise TypeError
        if price < 0:
            raise ValueError
        self.__price = price

    def get_information(self):
        return f"Назва товару: {self.name}\nНаявна кількість: {self.quantity}\nЦіна: {self.price}"

    def __iter__(self):
        self.index = 0
        return self

    def __next__(self):
        if self.index < len(self.list):
            self.index += 1
            return self.list[self.index - 1]
        raise StopIteration

    def __add__(self, other):
        if isinstance(other, list) and len(other) == 2:
            add_quantity, add_price = other
            if isinstance(add_quantity, int) and isinstance(add_price, int):
                return Composition(self.name, self.quantity + add_quantity, self.price + add_price)
        else:
            return NotImplemented

my_list = []
for i in range(5):
    my_list.append(Composition(f"thing{i+1}", i*3, i*5))
my_list += f"thing{6}", 60, 600
thing = Composition("thing", 100, 500)
print(thing.get_information())
