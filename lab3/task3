from abc import ABC, abstractmethod


class ICourse(ABC):
    @abstractmethod
    def __init__(self):
        pass

    @abstractmethod
    def __str__(self):
        pass


class ILocalCourse(ICourse):
    @abstractmethod
    def __init__(self):
        pass


class IOffsiteCourse(ICourse):
    @abstractmethod
    def __init__(self):
        pass


class ITeacher:
    @abstractmethod
    def __init__(self):
        pass

    @abstractmethod
    def __str__(self):
        pass


class ICourseFactory(ABC):
    @abstractmethod
    def create_teacher(self, surname, name, last_name):
        pass

    @abstractmethod
    def create_local_course(self, name, teacher, prog):
        pass

    @abstractmethod
    def create_offsite_course(self, name, teacher, prog):
        pass


class LocalCourse(ILocalCourse):
    def __init__(self, name, teacher, prog):
        self.name = name
        self.teacher = teacher
        self.prog = prog

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, name):
        if not isinstance(name, str):
            raise ValueError
        self.__name = name

    @property
    def teacher(self):
        return self.__teacher

    @teacher.setter
    def teacher(self, teacher):
        if not isinstance(teacher, ITeacher):
            raise ValueError
        self.__teacher = teacher

    @property
    def prog(self):
        return self.__prog

    @prog.setter
    def prog(self, prog):
        if not isinstance(prog, str):
            raise ValueError
        self.__prog = prog

    def __str__(self):
        return f'Назва курсу: {self.name}\nВикладач: {self.teacher}\nПрограма курсу: {self.prog}\n'


class OffsiteCourse(IOffsiteCourse):
    def __init__(self, name, teacher, prog):
        self.name = name
        self.teacher = teacher
        self.prog = prog

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, name):
        if not isinstance(name, str):
            raise ValueError
        self.__name = name

    @property
    def teacher(self):
        return self.__teacher

    @teacher.setter
    def teacher(self, teacher):
        if not isinstance(teacher, ITeacher):
            raise ValueError
        self.__teacher = teacher

    @property
    def prog(self):
        return self.__prog

    @prog.setter
    def prog(self, prog):
        if not isinstance(prog, str):
            raise ValueError
        self.__prog = prog

    def __str__(self):
        return f'Назва курсу: {self.name}\nВикладач: {self.teacher}\nПрограма курсу: {self.prog}\n'


class Teacher(ITeacher):
    def __init__(self, surname, name, last_name):
        self.surname = surname
        self.name = name
        self.last_name = last_name

    @property
    def surname(self):
        return self.__surname

    @surname.setter
    def surname(self, surname):
        if not isinstance(surname, str):
            raise ValueError
        self.__surname = surname

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, name):
        if not isinstance(name, str):
            raise ValueError
        self.__name = name

    @property
    def last_name(self):
        return self.__last_name

    @last_name.setter
    def last_name(self, last_name):
        if not isinstance(last_name, str):
            raise ValueError
        self.__last_name = last_name

    def __str__(self):
        return f'\n     Інформація про викладача:\n      Прізвище: {self.surname}\n      ' \
               f'Ім`я: {self.name}\n      По-батькові:{self.last_name}'


class CourseFactory(ICourseFactory):
    def create_teacher(self, surname, name, last_name) -> ITeacher:
        return Teacher(surname, name, last_name)

    def create_local_course(self, name, teacher, prog) -> ILocalCourse:
        return LocalCourse(name, teacher, prog)

    def create_offsite_course(self, name, teacher, prog) -> IOffsiteCourse:
        return OffsiteCourse(name, teacher, prog)


factory = CourseFactory()

teacher1 = factory.create_teacher('Сидоренко', 'Дар`я', 'Володимирівна')
teacher2 = factory.create_teacher('Корнієнко', 'Святослав', 'Миколайович')

local1 = factory.create_local_course('Історія України', teacher2, 'Програма №1')
local2 = factory.create_local_course('Математика', teacher1, 'Програма №2')

offsite1 = factory.create_offsite_course('Програмування', teacher1, 'Програма №3')
offsite2 = factory.create_offsite_course('Біологія', teacher2, 'Програма №4')

print(local1)
print(local2)

print(offsite1)
print(offsite2)
