import math


class Rational:
    def __init__(self, numerator, denominator):
        self.gcd = math.gcd(numerator, denominator)
        self.numerator = numerator
        self.denominator = denominator

    @property
    def numerator(self):
        return self.__numerator

    @property
    def denominator(self):
        return self.__denominator

    @numerator.setter
    def numerator(self, n):
        if not n:
            n = 1
        if not isinstance(n, int):
            raise TypeError
        self.__numerator = n // self.gcd

    @denominator.setter
    def denominator(self, d):
        if d == 0:
            raise ZeroDivisionError
        if not d:
            d = 1
        if not isinstance(d, int):
            raise TypeError
        self.__denominator = d // self.gcd

    def print_rational(self):
        return str(f"{int(self.numerator)}/{int(self.denominator)}")

    def print_float(self):
        return self.numerator/self.denominator

    def __add__(self, other):
        if isinstance(other, Rational):
            lcm = math.lcm(self.denominator * other.denominator)
            r_numerator = self.numerator * other.denominator + other.numerator * self.denominator
            r_denominator = lcm
            return Rational(r_numerator, r_denominator)
        else:
            return NotImplemented

    def __sub__(self, other):
        if isinstance(other, Rational):
            lcm = math.lcm(self.denominator * other.denominator)
            r_numerator = self.numerator * other.denominator - other.numerator * self.denominator
            r_denominator = lcm
            return Rational(r_numerator, r_denominator)
        else:
            return NotImplemented

    def __mul__(self, other):
        if isinstance(other, Rational):
            r_numerator = self.numerator * other.numerator
            r_denominator = self.denominator * other.denominator
            return Rational(r_numerator, r_denominator)
        else:
            return NotImplemented

    def __truediv__(self, other):
        if isinstance(other, Rational):
            r_numerator = self.numerator * other.denominator
            r_denominator = self.denominator * other.numerator
            return Rational(r_numerator, r_denominator)
        else:
            return NotImplemented

    def __lt__(self, other):
        if isinstance(other, Rational):
            return self.print_float() < other.print_float()
        else:
            return NotImplemented

    def __le__(self, other):
        if isinstance(other, Rational):
            return self.print_float() <= other.print_float()
        else:
            return NotImplemented

    def __gt__(self, other):
        if isinstance(other, Rational):
            return self.print_float() > other.print_float()
        else:
            return NotImplemented

    def __ge__(self, other):
        if isinstance(other, Rational):
            return self.print_float() >= other.print_float()
        else:
            return NotImplemented

    def __eq__(self, other):
        if isinstance(other, Rational):
            return self.print_float() == other.print_float()
        else:
            return NotImplemented

    def __ne__(self, other):
        if isinstance(other, Rational):
            return self.print_float() != other.print_float()
        else:
            return NotImplemented


a, b = Rational(3, 2), Rational(1, 4)
print(f"a = {a.print_rational()} = {a.print_float()}")
print(f"b = {b.print_rational()} = {b.print_float()}")
print(f"a + b = {(a+b).print_rational()} = {(a+b).print_float()}")
print(f"a - b = {(a-b).print_rational()} = {(a-b).print_float()}")
print(f"a * b = {(a*b).print_rational()} = {(a*b).print_float()}")
print(f"a / b = {(a/b).print_rational()} = {(a/b).print_float()}")
print(f"a < b = {a<b}")
print(f"a <= b = {a<=b}")
print(f"a > b = {a>b}")
print(f"a >= b = {a>=b}")
print(f"a == b = {a==b}")
print(f"a != b = {a!=b}")
